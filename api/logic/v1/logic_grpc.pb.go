// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: logic/v1/logic.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogicClient is the client API for Logic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogicClient interface {
	SingleSend(ctx context.Context, in *SingleSendRequest, opts ...grpc.CallOption) (*SendReplay, error)
	SingleRecall(ctx context.Context, in *SingleRecallRequest, opts ...grpc.CallOption) (*RecallReplay, error)
	GroupSend(ctx context.Context, in *GroupSendRequest, opts ...grpc.CallOption) (*SendReplay, error)
	GroupSendMention(ctx context.Context, in *GroupSendMentionRequest, opts ...grpc.CallOption) (*SendReplay, error)
	GroupRecall(ctx context.Context, in *GroupRecallRequest, opts ...grpc.CallOption) (*RecallReplay, error)
	RoomSend(ctx context.Context, in *GroupSendRequest, opts ...grpc.CallOption) (*SendReplay, error)
	RoomBroadcast(ctx context.Context, in *GroupSendRequest, opts ...grpc.CallOption) (*SendReplay, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReplay, error)
	// Connect
	Connect(ctx context.Context, in *ConnectReq, opts ...grpc.CallOption) (*ConnectReply, error)
	// Disconnect
	Disconnect(ctx context.Context, in *DisConnectReq, opts ...grpc.CallOption) (*DisConnectReply, error)
}

type logicClient struct {
	cc grpc.ClientConnInterface
}

func NewLogicClient(cc grpc.ClientConnInterface) LogicClient {
	return &logicClient{cc}
}

func (c *logicClient) SingleSend(ctx context.Context, in *SingleSendRequest, opts ...grpc.CallOption) (*SendReplay, error) {
	out := new(SendReplay)
	err := c.cc.Invoke(ctx, "/api.logic.v1.Logic/SingleSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) SingleRecall(ctx context.Context, in *SingleRecallRequest, opts ...grpc.CallOption) (*RecallReplay, error) {
	out := new(RecallReplay)
	err := c.cc.Invoke(ctx, "/api.logic.v1.Logic/SingleRecall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) GroupSend(ctx context.Context, in *GroupSendRequest, opts ...grpc.CallOption) (*SendReplay, error) {
	out := new(SendReplay)
	err := c.cc.Invoke(ctx, "/api.logic.v1.Logic/GroupSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) GroupSendMention(ctx context.Context, in *GroupSendMentionRequest, opts ...grpc.CallOption) (*SendReplay, error) {
	out := new(SendReplay)
	err := c.cc.Invoke(ctx, "/api.logic.v1.Logic/GroupSendMention", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) GroupRecall(ctx context.Context, in *GroupRecallRequest, opts ...grpc.CallOption) (*RecallReplay, error) {
	out := new(RecallReplay)
	err := c.cc.Invoke(ctx, "/api.logic.v1.Logic/GroupRecall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) RoomSend(ctx context.Context, in *GroupSendRequest, opts ...grpc.CallOption) (*SendReplay, error) {
	out := new(SendReplay)
	err := c.cc.Invoke(ctx, "/api.logic.v1.Logic/RoomSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) RoomBroadcast(ctx context.Context, in *GroupSendRequest, opts ...grpc.CallOption) (*SendReplay, error) {
	out := new(SendReplay)
	err := c.cc.Invoke(ctx, "/api.logic.v1.Logic/RoomBroadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReplay, error) {
	out := new(LoginReplay)
	err := c.cc.Invoke(ctx, "/api.logic.v1.Logic/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) Connect(ctx context.Context, in *ConnectReq, opts ...grpc.CallOption) (*ConnectReply, error) {
	out := new(ConnectReply)
	err := c.cc.Invoke(ctx, "/api.logic.v1.Logic/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) Disconnect(ctx context.Context, in *DisConnectReq, opts ...grpc.CallOption) (*DisConnectReply, error) {
	out := new(DisConnectReply)
	err := c.cc.Invoke(ctx, "/api.logic.v1.Logic/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogicServer is the server API for Logic service.
// All implementations must embed UnimplementedLogicServer
// for forward compatibility
type LogicServer interface {
	SingleSend(context.Context, *SingleSendRequest) (*SendReplay, error)
	SingleRecall(context.Context, *SingleRecallRequest) (*RecallReplay, error)
	GroupSend(context.Context, *GroupSendRequest) (*SendReplay, error)
	GroupSendMention(context.Context, *GroupSendMentionRequest) (*SendReplay, error)
	GroupRecall(context.Context, *GroupRecallRequest) (*RecallReplay, error)
	RoomSend(context.Context, *GroupSendRequest) (*SendReplay, error)
	RoomBroadcast(context.Context, *GroupSendRequest) (*SendReplay, error)
	Login(context.Context, *LoginReq) (*LoginReplay, error)
	// Connect
	Connect(context.Context, *ConnectReq) (*ConnectReply, error)
	// Disconnect
	Disconnect(context.Context, *DisConnectReq) (*DisConnectReply, error)
	mustEmbedUnimplementedLogicServer()
}

// UnimplementedLogicServer must be embedded to have forward compatible implementations.
type UnimplementedLogicServer struct {
}

func (UnimplementedLogicServer) SingleSend(context.Context, *SingleSendRequest) (*SendReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SingleSend not implemented")
}
func (UnimplementedLogicServer) SingleRecall(context.Context, *SingleRecallRequest) (*RecallReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SingleRecall not implemented")
}
func (UnimplementedLogicServer) GroupSend(context.Context, *GroupSendRequest) (*SendReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupSend not implemented")
}
func (UnimplementedLogicServer) GroupSendMention(context.Context, *GroupSendMentionRequest) (*SendReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupSendMention not implemented")
}
func (UnimplementedLogicServer) GroupRecall(context.Context, *GroupRecallRequest) (*RecallReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupRecall not implemented")
}
func (UnimplementedLogicServer) RoomSend(context.Context, *GroupSendRequest) (*SendReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomSend not implemented")
}
func (UnimplementedLogicServer) RoomBroadcast(context.Context, *GroupSendRequest) (*SendReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomBroadcast not implemented")
}
func (UnimplementedLogicServer) Login(context.Context, *LoginReq) (*LoginReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedLogicServer) Connect(context.Context, *ConnectReq) (*ConnectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedLogicServer) Disconnect(context.Context, *DisConnectReq) (*DisConnectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedLogicServer) mustEmbedUnimplementedLogicServer() {}

// UnsafeLogicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogicServer will
// result in compilation errors.
type UnsafeLogicServer interface {
	mustEmbedUnimplementedLogicServer()
}

func RegisterLogicServer(s grpc.ServiceRegistrar, srv LogicServer) {
	s.RegisterService(&Logic_ServiceDesc, srv)
}

func _Logic_SingleSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).SingleSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.v1.Logic/SingleSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).SingleSend(ctx, req.(*SingleSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_SingleRecall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleRecallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).SingleRecall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.v1.Logic/SingleRecall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).SingleRecall(ctx, req.(*SingleRecallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_GroupSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).GroupSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.v1.Logic/GroupSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).GroupSend(ctx, req.(*GroupSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_GroupSendMention_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupSendMentionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).GroupSendMention(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.v1.Logic/GroupSendMention",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).GroupSendMention(ctx, req.(*GroupSendMentionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_GroupRecall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRecallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).GroupRecall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.v1.Logic/GroupRecall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).GroupRecall(ctx, req.(*GroupRecallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_RoomSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).RoomSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.v1.Logic/RoomSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).RoomSend(ctx, req.(*GroupSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_RoomBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).RoomBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.v1.Logic/RoomBroadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).RoomBroadcast(ctx, req.(*GroupSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.v1.Logic/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.v1.Logic/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).Connect(ctx, req.(*ConnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisConnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.v1.Logic/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).Disconnect(ctx, req.(*DisConnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Logic_ServiceDesc is the grpc.ServiceDesc for Logic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Logic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.logic.v1.Logic",
	HandlerType: (*LogicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SingleSend",
			Handler:    _Logic_SingleSend_Handler,
		},
		{
			MethodName: "SingleRecall",
			Handler:    _Logic_SingleRecall_Handler,
		},
		{
			MethodName: "GroupSend",
			Handler:    _Logic_GroupSend_Handler,
		},
		{
			MethodName: "GroupSendMention",
			Handler:    _Logic_GroupSendMention_Handler,
		},
		{
			MethodName: "GroupRecall",
			Handler:    _Logic_GroupRecall_Handler,
		},
		{
			MethodName: "RoomSend",
			Handler:    _Logic_RoomSend_Handler,
		},
		{
			MethodName: "RoomBroadcast",
			Handler:    _Logic_RoomBroadcast_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Logic_Login_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _Logic_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Logic_Disconnect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logic/v1/logic.proto",
}
