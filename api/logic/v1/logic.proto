// Copyright 2022 gqzcl <gqzcl@qq.com>. All rights reserved.
// Use of this source code is governed by a MIT style

syntax = "proto3";

package api.logic.v1;

import "google/api/annotations.proto";
//import "google/protobuf/struct.proto";
import "job/v1/job.proto";

option go_package = "arod-im/api/logic/v1;v1";
option java_multiple_files = true;
option java_package = "api.logic.v1";

service Logic {
	rpc SingleSend(SingleSendRequest) returns(SendReplay){
		option (google.api.http)={
			post: "v1/single/send",
			body: "*",
		};
	}
	rpc SingleRecall(SingleRecallRequest) returns(RecallReplay){
		option (google.api.http)={
			post: "v1/single/recall",
			body: "*",
		};
	}
	rpc GroupSend(GroupSendRequest) returns(SendReplay){
		option (google.api.http)={
			post: "v1/group/send",
			body: "*",
		};
	}
	rpc GroupSendMention(GroupSendMentionRequest) returns(SendReplay){
		option (google.api.http)={
			post: "v1/group/send_mention",
			body: "*",
		};
	}
	rpc GroupRecall(GroupRecallRequest) returns(RecallReplay){
		option (google.api.http)={
			post: "v1/group/recall",
			body: "*",
		};
	}
	rpc RoomSend(GroupSendRequest) returns(SendReplay){
		option (google.api.http)={
			post: "v1/room/send",
			body: "*",
		};
	}
	rpc RoomBroadcast(GroupSendRequest) returns(SendReplay){
		option (google.api.http)={
			post: "v1/room/broadcast",
			body: "*",
		};
	}
	rpc Login(LoginReq) returns(LoginReplay){
		option (google.api.http)={
			post: "v1/login",
			body: "*",
		};
	}
	// Connect
	rpc Connect(ConnectReq) returns (ConnectReply);
	// Disconnect
	rpc Disconnect(DisConnectReq) returns (DisConnectReply);
}

// MsgType 消息类型
enum MsgType{
	text = 0; // 文本消息
	image = 1; // 图片消息
	face = 2; // 表情消息
	video = 3; // 视频消息
	file = 4; // 文件消息
	sound = 5; // 音频消息
}

//message MsgBody {
//	string msg_type = 1;
//	// 根据不同消息类型有不同的消息内容
//	google.protobuf.Struct msg_content = 2;
//}

// SendReplay 消息返回响应
message  SendReplay{
	string action_status = 1; // 请求结果
	string error_info = 2; // 错误信息
	uint32 error_code = 3; // 错误码
	int64 msg_time = 4; // 消息时间戳
	string msg_seq = 5; // 消息序列号
}

// RecallReplay 撤回消息返回响应
message  RecallReplay{
	string action_status = 1; // 请求结果
	string error_info = 2; // 错误信息
	uint32 error_code = 3; // 错误码
}

// SingleSendRequest 单聊发送消息请求
message SingleSendRequest{
	string uid = 1;
	string cid = 2;
	repeated job.v1.MsgBody msg_body = 3;
}

// SingleRecallRequest 单聊撤回消息请求
message SingleRecallRequest{
	string uid = 1;
	string cid = 2;
	string msg_key =3;
}

// GroupSendRequest 群聊发送消息请求
message GroupSendRequest{
	string uid = 1;
	string group_id = 2;
	repeated job.v1.MsgBody msg_body = 3;
}

// GroupSendMentionRequest 群聊@消息请求
message GroupSendMentionRequest{
	message GroupAtInfo {
		// 标志为1时表示@全体，为0时为@指定用户
		uint32 group_at_flag = 1;
		string group_at_uid = 2;
	}

	string Uid = 1;
	string GroupId = 2;
	repeated job.v1.MsgBody msg_body = 3;
	repeated GroupAtInfo group_at_info = 4;
}


// GroupRecallRequest 群聊撤回消息请求
message GroupRecallRequest{
	string group_id = 1;
	string msg_seq = 2;
}

// ConnectReq 连接请求
message ConnectReq{
	string server = 1;
	string uid = 2;
	string address = 3; // format: ip:port
	bytes token = 4;
}

// ConnectReply 连接响应
message ConnectReply{
	string action_status = 1; // 请求结果
	string error_info = 2; // 错误信息
	uint32 error_code = 3; // 错误码
	bool success = 4; 
}

// DisConnectReq 断开连接请求
message DisConnectReq {
	string uid = 1;
	string address = 2; // format: ip:port
	string server = 3;
}

// DisConnectReply 断开连接响应
message DisConnectReply {
	string action_status = 1; // 请求结果
	string error_info = 2; // 错误信息
	uint32 error_code = 3; // 错误码
	bool success = 4;
}

// LoginReq 登录请求
message LoginReq {
	string uid = 1; 
}

// LoginReplay 登录响应
message LoginReplay {
	string action_status = 1; // 请求结果
	string error_info = 2; // 错误信息
	uint32 error_code = 3; // 错误码
	string access_token = 4; // token
	int64 access_expire = 5; // 过期时间
}