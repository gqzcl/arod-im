syntax = "proto3";

package api.logic.v1;

option go_package = "arod-im/api/logic/v1;v1";
option java_multiple_files = true;
option java_package = "api.logic.v1";

import "api/protocol/protocol.proto";

service Logic {
    // Connect
    rpc Connect(ConnectReq) returns (ConnectReply);
    // Disconnect
    rpc Disconnect(DisConnectReq) returns (DisConnectReply);
    // Heartbeat
    rpc Heartbeat(HeartbeatReq) returns (HeartbeatReply);
    // RenewOnline
    rpc RenewOnline(OnlineReq) returns (OnlineReply);
    // Receive
    rpc Receive(ReceiveReq) returns (ReceiveReply);
	//ServerList
	rpc Nodes(NodesReq) returns (NodesReply);
}

message PushMsg {
    enum Type {
        PUSH = 0;
        ROOM = 1;
        BROADCAST = 2;
    }
    Type type = 1; // 消息类型
    int32 operation = 2;
    int32 speed = 3;
    string server = 4;
    string room = 5;
    repeated string keys = 6;
    bytes msg = 7; 
}

message ConnectReq {
    string server = 1;
    string cookie = 2;
    bytes token = 3;
}

message ConnectReply {
    int64 mid = 1;
    string key = 2;
    string roomID = 3;
    repeated int32 accepts = 4;
    int64 heartbeat = 5;
}

message DisConnectReq {
    int64 mid = 1;
    string key = 2;
    string server = 3;
}

message DisConnectReply {
    bool has = 1;
}

message HeartbeatReq {
    int64 mid = 1;
    string key = 2;
    string server = 3;
}

message HeartbeatReply {
}

message OnlineReq {
    string server = 1;
    map<string, int32> roomCount = 2;
}

message OnlineReply {
    map<string, int32> allRoomCount = 1;
}

message ReceiveReq {
    int64 mid = 1;
    protocol.Proto proto = 2;
}

message ReceiveReply {
}

message NodesReq {
	string platform = 1;
	string clientIP = 2;
}

message NodesReply {
	string domain = 1;
	int32 tcp_port = 2;
	int32 ws_port = 3;
	int32 wss_port = 4;
	int32 heartbeat = 5;
	repeated string nodes = 6;
	Backoff backoff = 7;
	int32 heartbeat_max = 8;
}

message Backoff {
	int32	max_delay = 1;
	int32	base_delay = 2;
	float	factor = 3;
	float	jitter = 4;
}